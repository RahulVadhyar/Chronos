cmake_minimum_required(VERSION 3.13)
project(Chronos VERSION 0.0.0)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(GAME_NAME "Chronos")

if(UNIX)
    option(CHRONOS_SUPPORT_WAYLAND "Build with Wayland support" ON)
endif()

option(CHRONOS_BUILD_TESTS "Build the tests" OFF)
option(CHRONOS_BUILD_EDITOR "Build the editor" ON)
option(CHRONOS_ENABLE_VULKAN_VALIDATION_LAYERS "Enable Vulkan validation layers" ON)
option(CHRONOS_ENABLE_OPTIMIZATIONS "Enable compiler optimizations and enable most warnings, along with generating release binaries" ON)

if(UNIX)
    set(CMAKE_CXX_FLAGS "-Wall -Wextra -Wpedantic -Wno-overloaded-virtual -Wno-unused-parameter -Wno-vla -O3 -march=native")
endif()

if(CHRONOS_ENABLE_OPTIMIZATIONS)
    set(CMAKE_BUILD_TYPE Release)
    message("Building for release!")
else()
    set(CMAKE_BUILD_TYPE Debug)
    message("Building for debug!")
endif()

add_library(Chronos)
target_include_directories(Chronos PUBLIC include)
target_compile_definitions(Chronos PUBLIC GAME_NAME="${GAME_NAME}")
message("Game name: ${GAME_NAME}")
target_compile_definitions(Chronos PUBLIC GAME_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
target_compile_definitions(Chronos PUBLIC GAME_VERSION_MINOR=${PROJECT_VERSION_MINOR})
target_compile_definitions(Chronos PUBLIC GAME_VERSION_PATCH=${PROJECT_VERSION_PATCH})
message("Game version: ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
target_compile_definitions(Chronos PUBLIC CHRONOS_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
target_compile_definitions(Chronos PUBLIC CHRONOS_VERSION_MINOR=${PROJECT_VERSION_MINOR})
target_compile_definitions(Chronos PUBLIC CHRONOS_VERSION_PATCH=${PROJECT_VERSION_PATCH})
message("Chronos version: ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")

#editor executable
if(CHRONOS_BUILD_EDITOR)
    message("Building editor")
    add_executable(ChronosEditor)
    target_compile_definitions(ChronosEditor PUBLIC ENABLE_EDITOR)
    target_compile_definitions(ChronosEditor PUBLIC GAME_NAME="ChronosEditor")
    message("Game name: ChronosEditor")
    target_compile_definitions(ChronosEditor PUBLIC GAME_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
    target_compile_definitions(ChronosEditor PUBLIC GAME_VERSION_MINOR=${PROJECT_VERSION_MINOR})
    target_compile_definitions(ChronosEditor PUBLIC GAME_VERSION_PATCH=${PROJECT_VERSION_PATCH})
    message("Game Editor version: ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
    target_compile_definitions(ChronosEditor PUBLIC CHRONOS_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
    target_compile_definitions(ChronosEditor PUBLIC CHRONOS_VERSION_MINOR=${PROJECT_VERSION_MINOR})
    target_compile_definitions(ChronosEditor PUBLIC CHRONOS_VERSION_PATCH=${PROJECT_VERSION_PATCH})
    message("ChronosEditor version: ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
    target_include_directories(ChronosEditor PUBLIC include)
endif()

add_subdirectory(ThirdParty)
add_subdirectory(Source)
add_subdirectory(Shaders)